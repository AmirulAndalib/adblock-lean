#!/bin/sh /etc/rc.common
# shellcheck disable=SC3043,SC1091,SC3001,SC2018,SC2019,SC3020,SC3003,SC2181

# adblock-lean - super simple and lightweight adblocking for OpenWrt

# Project homepage: https://github.com/lynxthecat/adblock-lean

# Authors: @Lynx and @Wizballs (OpenWrt forum)
# Contributors: @antonk; @dave14305 (OpenWrt forum)

# global exit codes:
# 0 - Success
# 1 - Error
# 254 - Failed to acquire lock

# special variables for luci:
# luci_errors
# luci_good_line_count
# luci_dnsmasq_status
# luci_update_status
# luci_pid_action

# expects that the RPC script for luci UI is named specifically 'luci.adblock-lean'


LC_ALL=C

if [ -t 0 ]
then
	msgs_dest="/dev/tty"
else
	msgs_dest="/dev/null"
fi

PREFIX=/root/adblock-lean

export PATH=/usr/sbin:/usr/bin:/sbin:/bin
export HOME=/root

START=99
STOP=4

EXTRA_COMMANDS="status pause resume gen_stats gen_config update"
EXTRA_HELP="	
adblock-lean custom commands:
	status		check dnsmasq and good line count of existing blocklist
	pause		pause adblock-lean
	resume		resume adblock-lean
	gen_stats	generate dnsmasq stats for system log
	gen_config	generate default config
	update		update adblock-lean to the latest version"


### UTILITY FUNCTIONS

get_file_size_human()
{
	bytes2human "$(du -b "$1" | awk '{print $1}')"
}

# converts unsigned integer to [xB|xKiB|xMiB|xGiB|xTiB]
# if result is not an integer, outputs up to 2 digits after decimal point
# 1 - int
bytes2human()
{
	local i=${1:-0} s=0 d=0 m=1024 fp='' S=''
	case "$i" in *[!0-9]*) reg_failure "bytes2human: Invalid unsigned integer '$i'."; return 1; esac
	for S in B KiB MiB GiB TiB; do
		[ $((i > m && s < 4)) = 0 ] && break
		d=$i i=$((i/m)) s=$((s+1))
	done
	d=$((d % m * 100 / m))
	case $d in
		0) printf "%s %s\n" "$i" "$S"; return ;;
		[1-9]) fp="02" ;;
		*0) d=${d%0}; fp="01"
	esac
	printf "%s.%${fp}d %s\n" "$i" "$d" "$S"
}

int2human()
{
	case "$1" in *[!0-9]*) reg_failure "int2human: Invalid unsigned integer '$1'."; return 1; esac
	local in_num="$1" out_num=''

	# strip leading zeroes
	while true
	do
		case "$in_num" in
			0?*) in_num="${in_num#0}" ;;
			*) break
		esac
	done

	while true
	do
		case "$in_num" in 
			????*)
				out_num=",${in_num#"${in_num%???}"}${out_num}"
				in_num="${in_num%???}" ;;
			*) break
		esac
	done
	out_num="${in_num}${out_num}"

	echo "${out_num#,}"
}

get_uptime_ms()
{
	read -r uptime_ms _ < /proc/uptime
	printf "${uptime_ms%.*}${uptime_ms#*.}0"
}

get_elapsed_time_str()
{
	# To use, first set initial uptime: initial_uptime_ms=$(get_uptime_ms)
	# Then call this function to get elapsed time string at desired intervals, e.g.:
	# printf "Elapsed time: $(get_elapsed_time_str)\n"

	elapsed_time_s=$(( ($(get_uptime_ms)-${initial_uptime_ms:-$(get_uptime_ms)})/1000 ))
	printf '%dm:%ds' $((elapsed_time_s/60)) $((elapsed_time_s%60))
}

print_msg()
{
	printf '%s\n' "${1}" > "$msgs_dest"
}

log_msg()
{
	local msg='' _arg='' err_l=info

	for _arg in "$@"; do
		case "${_arg}" in
			"-err") err_l=err ;;
			"-warn") err_l=warn ;;
			'') ;;
			*) msg="${msg}${_arg} "
		esac
	done
	msg="${msg% }"

	print_msg "${msg}"
	logger -t adblock-lean -p user."${err_l}" "${msg}"
}

try_mv()
{
	[ -z "${1}" ] || [ -z "${2}" ] && { reg_failure "try_mv(): bad arguments."; return 1; }
	mv -f "${1}" "${2}" || { reg_failure "Error: failed to rename '${1}'."; return 1; }
	:
}


### HELPER FUNCTIONS

clean_dnsmasq_dir()
{
	rm -f /tmp/dnsmasq.d/.blocklist.gz /tmp/dnsmasq.d/blocklist /tmp/dnsmasq.d/conf-script /tmp/dnsmasq.d/.extract_blocklist
}

# exit with code ${1}
# if function 'abl_luci_exit' is defined, execute it before exit
cleanup_and_exit()
{
	trap - INT TERM EXIT
	[ -n "${cleanup_req}" ] && rm -rf "/var/run/adblock-lean"
	[ -n "${lock_req}" ] && rm_lock
	[ -z "${luci_sourced}" ] && [ -n "${report_failure}" ] && [ -n "${failure_msg}" ] && eval "${report_failure}"
	[ -n "${luci_sourced}" ] && abl_luci_exit "${1}"
	exit "${1}"
}

# return codes:
# 0 - blocklist file present
# 1 - blocklist file not present
check_active_blocklist_file()
{
	local f
	for f in "/tmp/dnsmasq.d/.blocklist.gz" "/tmp/dnsmasq.d/blocklist"
	do
		[ -f "${f}" ] && return 0
	done
	return 1
}

reg_failure()
{
	log_msg -err "${1}"
	failure_msg="${failure_msg}${1}"$'\n'
	luci_errors="${failure_msg}"
}

log_success()
{
	log_msg "${1}"
	if [ -n "${report_success}" ]
	then
		success_msg="${1}"
		eval "${report_success}"
	fi
}

load_config()
{
	if [ -f "${PREFIX}/config" ]
	then
		. "${PREFIX}/config"
	else
		reg_failure "ERROR: no config file identified at: ${PREFIX}/config."
		log_msg "Generate default config using 'service adblock-lean gen_config'."
		return 1
	fi

	if ! {
			[ "${max_download_retries+set}" ] &&
			[ "${blocklist_urls+set}" ] &&
			[ "${allowlist_urls+set}" ] &&
			[ "${local_allowlist_path+set}" ] &&
			[ "${local_blocklist_path+set}" ] &&
			[ "${min_blocklist_file_part_line_count+set}" ] &&
			[ "${max_blocklist_file_part_size_KB+set}" ] &&
			[ "${max_blocklist_file_size_KB+set}" ] &&
			[ "${min_good_line_count+set}" ] &&
			[ "${compress_blocklist+set}" ] &&
			[ "${initial_dnsmasq_restart+set}" ] &&
			[ "${download_failed_action+set}" ] &&
			[ "${rogue_element_action+set}" ] &&
			[ "${dnsmasq_test_failed_action+set}" ] &&
			[ "${report_failure+set}" ] &&
			[ "${report_success+set}" ] &&
			[ "${boot_start_delay_s+set}" ]
	}
	then
		reg_failure "ERROR: config file entry missing."
		log_msg "Generate new default config using 'service adblock-lean gen_config'."
		log_msg "A new default config will be saved to: ${PREFIX}/config.new"
		log_msg "Check differences and/or overwrite old config with the newly generated config."
		return 1
	fi
	:
}

try_export_existing_blocklist()
{
	export_existing_blocklist
	case ${?} in
		1) reg_failure "Error: failed to export the blocklist."; return 1 ;;
		2) return 2
	esac
	:	
}

check_blocklist_compression_support()
{
	if ! dnsmasq --help | grep -qe "--conf-script"
	then
		reg_failure "The version of dnsmasq installed on this system does not support blocklist compression."
		log_msg "Blocklist compression support in dnsmasq can be verified by checking the output of: dnsmasq --help | grep -e \"--conf-script\""
		log_msg "Either upgrade OpenWrt and/or dnsmasq to a newer version that supports blocklist compression or disable blocklist compression in config."
		return 1
	fi

	addnmount_str=$(uci get dhcp.@dnsmasq[0].addnmount 2> /dev/null)

	for addnmount_path in ${addnmount_str}
	do
		printf "%s" "$addnmount_path" | grep -qE "^/bin(/*|/busybox)?$" && return 0
	done

	reg_failure "No appropriate 'addnmount' entry in /etc/config/dhcp was identified."
	log_msg "This is leveraged to give dnsmasq access to busybox gunzip to extract compressed blocklist."
	log_msg "Add: \"list addnmount '/bin/busybox'\" to /etc/config/dhcp at the end of the dnsmasq section."
	log_msg "Or simply run this command: uci add_list dhcp.@dnsmasq[0].addnmount='/bin/busybox' && uci commit"
	log_msg "Either edit /etc/config/dhcp as described above or disable blocklist compression in config."
	return 1
}

generate_preprocessed_blocklist_file_parts()
{
	rm -f /var/run/adblock-lean/allowlist*
	allowlist_line_count=0
	allowlist_id=0

	if [ -f "${local_allowlist_path}" ]
	then
		log_msg "Found local allowlist."
		reg_action "Sanitizing allowlist file part." || return 1
		# 1 Convert to lowercase; 2 Remove comment lines and trailing comments; 3 Remove trailing address hash, and all whitespace; 4 Add newline
		allowlist_file_part_line_count="$(tr 'A-Z' 'a-z' < "${local_allowlist_path}" | sed 's/#.*$//; s/^[ \t]*//; s/[ \t]*$//; /^$/d; $a\' | tee /var/run/adblock-lean/allowlist | wc -l)"
		if [ "${allowlist_file_part_line_count}" -gt 0 ]
		then
			log_msg "Sanitized allowlist file part line count: $(int2human ${allowlist_file_part_line_count})."
		else
			log_msg -warn "No lines remaining in allowlist file part after sanitization."
		fi
		allowlist_line_count=$(( allowlist_line_count + allowlist_file_part_line_count ))
	else
		log_msg "No local allowlist identified."
	fi

	for allowlist_url in ${allowlist_urls}
	do
		retry=0
		while [ "${retry}" -le "${max_download_retries}" ]
		do
			retry=$((retry + 1))
			reg_action "Downloading and sanitizing new allowlist file part from: ${allowlist_url}." || return 1
			uclient-fetch "${allowlist_url}" -O- --timeout=3 2> /var/run/adblock-lean/uclient-fetch_err |
			tee >(wc -c > /var/run/adblock-lean/allowlist_file_part_size_B) |
			tr 'A-Z' 'a-z' | sed 's/#.*$//; s/^[ \t]*//; s/[ \t]*$//; /^$/d; $a\' |
			tee >(wc -l > /var/run/adblock-lean/allowlist_file_part_line_count) > \
				/var/run/adblock-lean/allowlist.${allowlist_id}

			allowlist_file_part_size_human="$(bytes2human "$(cat /var/run/adblock-lean/allowlist_file_part_size_B 2>/dev/null)" )"
			allowlist_file_part_line_count="$(cat /var/run/adblock-lean/allowlist_file_part_line_count 2>/dev/null)"
			: "${allowlist_file_part_line_count:=0}"
			rm -f /var/run/adblock-lean/allowlist_file_part_size_B /var/run/adblock-lean/allowlist_file_part_line_count

			if ! grep -q "Download completed" /var/run/adblock-lean/uclient-fetch_err
			then
				rm -f "/var/run/adblock-lean/allowlist.${allowlist_id}"
				reg_failure "Download of new allowlist file part from: ${allowlist_url} failed."
				if [ "${retry}" -lt "${max_download_retries}" ]
				then
					reg_action "Sleeping for 5 seconds after failed download attempt." || return 1
					sleep 5
					continue
				else
					break
				fi
			fi

			log_msg "Processing of new allowlist file part from: ${allowlist_url} succeeded (downloaded file size: ${allowlist_file_part_size_human})."

			if [ "${allowlist_file_part_line_count}" -gt 0 ]
			then
				log_msg "Sanitized allowlist file part line count: $(int2human ${allowlist_file_part_line_count})."
				allowlist_line_count=$(( allowlist_line_count + allowlist_file_part_line_count ))
				cat "/var/run/adblock-lean/allowlist.${allowlist_id}" >> /var/run/adblock-lean/allowlist
			else
				log_msg -warn "No lines remaining in allowlist file part after sanitization."
			fi

			rm -f  "/var/run/adblock-lean/allowlist.${allowlist_id}"
			allowlist_id=$(( allowlist_id + 1 ))
			continue 2
		done
		reg_failure "Download failed after three failed download attempts. Continuing further operation."
	done

	rm -f /var/run/adblock-lean/allowlist.*

	if [ -f /var/run/adblock-lean/allowlist ] && [ $allowlist_line_count -gt 0 ]
	then
		log_msg "Successfully generated allowlist with $(int2human ${allowlist_line_count}) lines."
		log_msg "Will remove any (sub)domain matches present in the generated allowlist from the blocklist file part(s) and append corresponding server entries to the combined blocklist."
		use_allowlist=1
	else
		log_msg "Not using any allowlist for blocklist processing."
		use_allowlist=0
	fi

	rm -f /var/run/adblock-lean/blocklist*

	if [ -f "${local_blocklist_path}" ]
	then
		local_blocklist_line_count=$(grep -vEc '^\s*$|^#' "${local_blocklist_path}")
		log_msg "Found local blocklist with $(int2human ${local_blocklist_line_count}) lines."
		reg_action "Sanitizing and compressing the local blocklist." || return 1
		sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d; s~.*~local=/&/~; $a\' "${local_blocklist_path}" | gzip > /var/run/adblock-lean/blocklist.0.gz
	else
		log_msg "No local blocklist identified."
	fi

	[ -n "${blocklist_urls}" ] && { reg_action "Downloading new blocklist file part(s)." || return 1; }

	preprocessed_blocklist_line_count=0
	blocklist_id=1
	for blocklist_url in ${blocklist_urls}
	do
		rm -f /var/run/adblock-lean/rogue_element /var/run/adblock-lean/dnsmasq_err /var/run/adblock-lean/uclient-fetch_err
		retry=0
		while [ "${retry}" -le "${max_download_retries}" ]
		do
			retry=$((retry + 1))
			reg_action "Downloading, checking and sanitizing new blocklist file part from: ${blocklist_url}." || return 1
			uclient-fetch "${blocklist_url}" -O- --timeout=3 2> /var/run/adblock-lean/uclient-fetch_err | 
			head -c "${max_blocklist_file_part_size_KB}k" |
			tee >(wc -c > /var/run/adblock-lean/blocklist_part_size_B) |
			# 1 Convert to lowercase; 2 Remove comment lines and trailing comments; 3 Remove trailing address hash, and all whitespace; 4 Convert to local=
			tr 'A-Z' 'a-z' | sed 's/#.*$//; s/^[ \t]*//; s/[ \t]*$//; /^$/d; s/^\(address=\|server=\)/local=/' |
			if [ "${use_allowlist}" = 1 ]
			then
				${awk_cmd} -F'/' 'NR==FNR { allow[$0]; next } { n=split($2,arr,"."); addr = arr[n]; for ( i=n-1; i>=1; i-- ) { addr = arr[i] "." addr; if ( addr in allow ) next } } 1' /var/run/adblock-lean/allowlist -
			else
				cat
			fi |
			tee >(wc -l > /var/run/adblock-lean/blocklist_part_line_count) |

			if [ "${rogue_element_action}" != "IGNORE" ]
			then
				tee >(sed -nE '\~^(local=/[[:alnum:]*][[:alnum:]*_.-]+/$|bogus-nxdomain=[0-9.]+$|$)~d;p;:1 n;b1' > /var/run/adblock-lean/rogue_element)
			else
				cat
			fi | tee >(gzip > /var/run/adblock-lean/blocklist.${blocklist_id}.gz) |
			{ dnsmasq --test -C - 2> /var/run/adblock-lean/dnsmasq_err && rm -f /var/run/adblock-lean/dnsmasq_err; cat 1>/dev/null; }

			blocklist_file_part_size_B="$(cat /var/run/adblock-lean/blocklist_part_size_B 2>/dev/null)"
			blocklist_file_part_size_KB=$(( (blocklist_file_part_size_B + 0) / 1024 ))
			blocklist_file_part_size_human="$(bytes2human "${blocklist_file_part_size_B}")"
			blocklist_file_part_line_count="$(cat /var/run/adblock-lean/blocklist_part_line_count 2>/dev/null)"
			: "${blocklist_file_part_line_count:=0}"

			rm -f /var/run/adblock-lean/blocklist_part_size_B /var/run/adblock-lean/blocklist_part_line_count

			if [ "${blocklist_file_part_size_KB}" -ge "${max_blocklist_file_part_size_KB}" ]
			then
				reg_failure "Downloaded blocklist file part size reached the maximum value set in config (${max_blocklist_file_part_size_KB} KB)."
				log_msg "Consider either increasing this value in the config or removing the corresponding blocklist url."
				log_msg "Skipping file part and continuing."
				rm -f "/var/run/adblock-lean/blocklist.${blocklist_id}.gz"
				continue 2
			fi

			if ! grep -q "Download completed" /var/run/adblock-lean/uclient-fetch_err
			then
				rm -f "/var/run/adblock-lean/blocklist.${blocklist_id}.gz"
				reg_failure "Download of new blocklist file part from: ${blocklist_url} failed."

				if [ "${retry}" -lt "${max_download_retries}" ]
				then
					reg_action "Sleeping for 5 seconds after failed download attempt." || return 1
					sleep 5
					continue
				else
					break
				fi
			fi

			if read -r rogue_element < /var/run/adblock-lean/rogue_element
			then
				rm -f "/var/run/adblock-lean/blocklist.${blocklist_id}.gz"

				log_msg -warn "Rogue element: '${rogue_element}' identified originating in blocklist file part from: ${blocklist_url}."

				if [ "${rogue_element_action}" = "STOP" ]
				then
					return 1
				else
					log_msg "Skipping file part and continuing."
					continue 2
				fi
			fi
			rm -f /var/run/adblock-lean/rogue_element

			if [ -f /var/run/adblock-lean/dnsmasq_err ]
			then
				rm -f "/var/run/adblock-lean/blocklist.${blocklist_id}.gz"
				reg_failure "The dnsmasq --test on the blocklist file part failed."
				log_msg "dnsmasq --test error:"
				log_msg "$(cat /var/run/adblock-lean/dnsmasq_err)"
				if [ "${dnsmasq_test_failed_action}" = "STOP" ]
				then
					return 1
				else
					log_msg "Skipping file part and continuing."
					continue 2
				fi
				return 1
			fi

			rm -f /var/run/adblock-lean/dnsmasq_err

			if [ "${blocklist_file_part_line_count}" -ge "${min_blocklist_file_part_line_count}" ]
			then
				log_msg "Processing of new blocklist file part from: ${blocklist_url} succeeded (downloaded file size: ${blocklist_file_part_size_human}; sanitized line count: $(int2human ${blocklist_file_part_line_count}))."

				preprocessed_blocklist_line_count=$(( preprocessed_blocklist_line_count + blocklist_file_part_line_count ))
				blocklist_id=$((blocklist_id+1))
				continue 2
			else
				rm -f "/var/run/adblock-lean/blocklist.${blocklist_id}.gz"
				reg_failure "Downloaded blocklist file part line count: $(int2human ${blocklist_file_part_line_count}) less than configured minimum: $(int2human ${min_blocklist_file_part_line_count})."
			fi

			if [ "${retry}" -lt "${max_download_retries}" ]
			then
				reg_action "Sleeping for 5 seconds after failed download attempt." || return 1
				sleep 5
				continue
			else
				break
			fi
		done

		if [ "${download_failed_action}" = "STOP" ]
		then
			reg_failure "Exiting after three failed download attempts."
			return 1
		else
			log_msg "Skipping file part and continuing."
		fi
	done

	rm -f /var/run/adblock-lean/uclient-fetch_err

	[ "${preprocessed_blocklist_line_count}" -gt 0 ] || return 1

	:
}

generate_and_process_blocklist_file()
{
	reg_action "Sorting and merging the blocklist lines into a single blocklist file." || return 1

	rm -f /var/run/adblock-lean/dnsmasq_err

	{
		[ "${use_allowlist}" = 1 ] && sed '/^$/d; s~.*~server=/&/#~' /var/run/adblock-lean/allowlist
		rm -f /var/run/adblock-lean/allowlist

		for blocklist_file_part_gz in /var/run/adblock-lean/blocklist.*.gz
		do
			gunzip -c "${blocklist_file_part_gz}"
			rm -f "${blocklist_file_part_gz}"
		done
	} | sort -u |

	head -c "${max_blocklist_file_size_KB}k" |

	tee >(wc -l > /var/run/adblock-lean/blocklist_file_line_count) |
	tee >(wc -c > /var/run/adblock-lean/blocklist_file_size_B) |

	if  [ "${compress_blocklist}" = 1 ]
	then
		gzip > /var/run/adblock-lean/blocklist.gz
	else
		cat > /var/run/adblock-lean/blocklist
	fi

	good_line_count="$(cat /var/run/adblock-lean/blocklist_file_line_count 2>/dev/null)"
	: "${good_line_count:=0}"

	if [ "${good_line_count}" -lt "${min_good_line_count}" ]
	then
		reg_failure "Good line count: $(int2human ${good_line_count}) below $(int2human ${min_good_line_count})."
		return 1
	fi

	blocklist_file_size_B="$(cat /var/run/adblock-lean/blocklist_file_size_B 2>/dev/null)"
	blocklist_file_size_KB=$(( (blocklist_file_size_B + 0) / 1024 ))
	blocklist_file_size_human="$(bytes2human "${blocklist_file_size_B}")"

	if [ "${blocklist_file_size_KB}" -ge "${max_blocklist_file_size_KB}" ]
	then
		reg_failure "Blocklist file size reached the maximum value set in config (${max_blocklist_file_size_KB} KB)."
		log_msg "Consider either increasing this value in the config or changing the blocklist URLs."
		return 1
	fi

	log_msg "Processed blocklist uncompressed file size: ${blocklist_file_size_human}."

	:
}

# return values:
# 0 - dnsmasq is running, and all checks passed
# 1 - dnsmasq is not running
# 2 - dnsmasq is running, but one of the test domains failed to resolve
# 3 - dnsmasq is running, but one of the test domains resolved to 0.0.0.0
check_dnsmasq()
{
	reg_action "Checking dnsmasq instance." || return 1

	if ! pgrep -x /usr/sbin/dnsmasq &> /dev/null
	then
		reg_failure "No instance of dnsmasq detected with new blocklist."
		return 1
	fi

	for domain in google.com amazon.com microsoft.com
	do
		if ! nslookup "${domain}" 127.0.0.1 &> /dev/null 
		then
			reg_failure "Lookup of '${domain}' failed with new blocklist."
			return 2
		elif nslookup "${domain}" 127.0.0.1 | grep -A1 ^Name | grep -q '^Address: *0\.0\.0\.0$'
		then
			reg_failure "Lookup of '${domain}' resulted in 0.0.0.0 with new blocklist."
			return 3
		fi
	done
	
	:
}

restart_dnsmasq()
{
	reg_action "Restarting dnsmasq." || return 1

	/etc/init.d/dnsmasq restart &> /dev/null || 
		{ reg_failure "Error: failed to restart dnsmasq."; return 1; }
	
	reg_action "Waiting for dnsmasq initialization." || return 1
	local dnsmasq_ok=
	for i in $(seq 1 60)
	do
		nslookup localhost 127.0.0.1 &> /dev/null && { dnsmasq_ok=1; break; }
		sleep 1;
	done

	[ -z "$dnsmasq_ok" ] && { reg_failure "Error: dnsmasq initialization failed. Failed to restart dnsmasq."; return 1; }

	log_msg "Restart of dnsmasq completed."
	:
}

# return codes:
# 0 - success
# 1 - failure
# 2 - blocklist file not found (nothing to export)
export_existing_blocklist()
{
	if [ -f /tmp/dnsmasq.d/.blocklist.gz ]
	then
		log_msg "Exporting and saving existing compressed blocklist."
		try_mv /tmp/dnsmasq.d/.blocklist.gz /var/run/adblock-lean/prev_blocklist.gz || return 1
		return 0
	elif [ -f /tmp/dnsmasq.d/blocklist ]
	then
		reg_action "Exporting and saving existing uncompressed blocklist." || return 1
		gzip -f /tmp/dnsmasq.d/blocklist ||
			{ reg_failure "Error: failed to compress '/tmp/dnsmasq.d/blocklist'."; return 1; }
		try_mv /tmp/dnsmasq.d/blocklist.gz /var/run/adblock-lean/prev_blocklist.gz || return 1
		return 0
	else
		log_msg "No existing compressed or uncompressed blocklist identified."
		return 2
	fi
}

restore_saved_blocklist()
{
	if [ -f /var/run/adblock-lean/prev_blocklist.gz ]
	then
		reg_action "Restoring saved blocklist file." || return 1
		try_mv /var/run/adblock-lean/prev_blocklist.gz /var/run/adblock-lean/blocklist.gz || return 1
		if [ "${compress_blocklist}" != 1 ]
		then
			gunzip -f /var/run/adblock-lean/blocklist.gz ||
				{ reg_failure "Error: failed to extract '/var/run/adblock-lean/blocklist.gz'."; return 1; }

		fi
		import_blocklist_file ||
			{ reg_failure "Error: failed to import the blocklist file."; return 1; }
		return 0
	else
		reg_failure "No previous blocklist file found."
		return 1
	fi
}

import_blocklist_file()
{
	if [ "${compress_blocklist}" = 1 ]
	then
		[ -f /var/run/adblock-lean/blocklist.gz ] || return 1
		clean_dnsmasq_dir
		printf "conf-script=\"busybox sh /tmp/dnsmasq.d/.extract_blocklist\"\n" > /tmp/dnsmasq.d/conf-script
		printf "busybox gunzip -c /tmp/dnsmasq.d/.blocklist.gz\nexit 0\n" > /tmp/dnsmasq.d/.extract_blocklist
		try_mv /var/run/adblock-lean/blocklist.gz /tmp/dnsmasq.d/.blocklist.gz || return 1
		imported_blocklist_file_size_human=$(get_file_size_human /tmp/dnsmasq.d/.blocklist.gz)
	else
		[ -f /var/run/adblock-lean/blocklist ] || return 1
		clean_dnsmasq_dir
		try_mv /var/run/adblock-lean/blocklist /tmp/dnsmasq.d/blocklist || return 1
		imported_blocklist_file_size_human=$(get_file_size_human /tmp/dnsmasq.d/blocklist)
	fi

	:
}

# return values:
# 0 - up-to-date
# 1 - not up-to-date
# 2 - update check failed
check_for_updates()
{
	sha256sum_adblock_lean_local=$(sha256sum /etc/init.d/adblock-lean | awk '{print $1}')
	sha256sum_adblock_lean_remote=$(uclient-fetch https://raw.githubusercontent.com/lynxthecat/adblock-lean/master/adblock-lean -O - 2> /var/run/adblock-lean/uclient-fetch_err | sha256sum | awk '{print $1}')

	local update_check_result
	if grep -q "Download completed" /var/run/adblock-lean/uclient-fetch_err
	then
		if [ "${sha256sum_adblock_lean_local}" = "${sha256sum_adblock_lean_remote}" ]
		then
			log_msg "The locally installed adblock-lean is the latest version."
			update_check_result=0
		else
			log_msg "The locally installed adblock-lean seems to be outdated."
			log_msg "Consider running: 'service adblock-lean update' to update it to the latest version."
			update_check_result=1
		fi
	else
		reg_failure "Unable to download latest version of adblock-lean to check for any updates."
		update_check_result=2
	fi
	rm -f /var/run/adblock-lean/uclient-fetch_err

	return ${update_check_result}
}

# updates the pid file with a new action
# 1 - new action
update_pid_action() {
	check_lock
	case ${?} in
		3) ;;
		1) return 1 ;;
		2) reg_failure "update_pid_action(): Error: pid file '${pid_file}' has unexpected pid '${_pid}'."; return 1 ;;
		0) reg_failure "update_pid_action(): Error: pid file '${pid_file}' not found."; return 1
	esac
	mk_lock -f "${1}"
	return ${?}
}

# args:
# 1 - (optional) -f to skip check for existing lock
# 1/2 - action to write to the pid file
#
# return codes:
# 0 - success
# 1 - error
# 254 - lock file already exists
mk_lock()
{
	if [ "${1}" != '-f' ]
	then
		check_lock
		case ${?} in
			1) return 1 ;;
			2)
				report_pid_action
				log_msg "Refusing to open another instance."
				return 254
		esac
	else
		shift
	fi

	[ -z "${1%.}" ] && { log_msg "mk_lock(): Error: pid action is unspecified."; return 1; }
	if [ -n "${pid_file}" ]
	then
		if [ ! -d "${pid_file%/*}" ]
		then
			mkdir -p "${pid_file%/*}" || { reg_failure "Error: Failed to create directory '${pid_file%/*}'."; return 1; }
		fi
		printf '%s\n' "${$} ${1%.}" > "${pid_file}" || { reg_failure "Error: Failed to write to pid file '${pid_file}'."; return 1; }
	else
		reg_failure "Internal error: \${pid_file} variable is unset."
		return 1
	fi
	:
}

rm_lock()
{
	if [ -f "${pid_file}" ]
	then
		rm -f "${pid_file}" || { reg_failure "Error: Failed to delete the pid file '${pid_file}'."; return 1; }
	fi
	:
}

# return codes:
# 0 - no lock
# 1 - error
# 2 - lock file exists and belongs to another PID
# 3 - lock file belongs to current PID
check_lock()
{
	unset _pid pid_action
	[ -z "${pid_file}" ] && { reg_failure "Internal error: \${pid_file} variable is unset."; return 1; }
	[ ! -f "${pid_file}" ] && return 0
	if read -r _pid pid_action < "${pid_file}"
	then
		case "${_pid}" in
			${$}) return 3 ;;
			*[!0-9]*) reg_failure "Error: pid file '${pid_file}' contains unexpected string."; return 1 ;;
			*) kill -0 "${_pid}" 2>/dev/null && return 2
		esac
	else
		reg_failure "Error: Failed to read the pid file '${pid_file}'."
		return 1
	fi

	log_msg -warn "Warning: detected stale pid file '${pid_file}'. Removing."
	rm_lock || return 1
	:
}

# kills any running adblock-lean instances
kill_abl_pids()
{
	local _killed _p _pid IFS=$'\n' k_attempt=0
	while true; do
		k_attempt=$((k_attempt+1))
		_killed=
		for _p in $(pgrep -fa '(/etc/rc.common /etc/init.d/adblock-lean|luci.adblock-lean)')
		do
			_pid="${_p%% *}"
			case ${_pid} in "${$}"|*[!0-9]*) continue; esac
			kill "${_pid}" 2>/dev/null
			_killed=1
		done
		[ -z "${_killed}" ] || [ ${k_attempt} -gt 10 ] && break
		sleep 1
	done
	:
}

# 1 - action
reg_action()
{
	log_msg "${1}"
	if [ -n "${lock_req}" ]
	then
		update_pid_action "${1}" || return 1
	fi
	:
}

report_pid_action()
{
	local reported_pid="unknown PID"
	[ -n "${_pid}" ] && reported_pid="PID ${_pid}"
	: "${pid_action:="unknown action"}"
	print_msg "adblock-lean (${reported_pid}) is performing action '${pid_action}'."
	luci_pid_action=${pid_action}
	:
}

init_command()
{
	action="${1}"
	pid_file="/tmp/adblock-lean/adblock-lean.pid"
	unset lock_req kill_req cleanup_req failure_msg luci_errors

	# detect if sourced from external RPC script for luci, depends on abl_luci_exit() being defined
	luci_sourced=
	command -v "abl_luci_exit" 1>/dev/null && luci_sourced=1

	trap 'cleanup_and_exit 1' INT TERM
	trap 'cleanup_and_exit ${?}' EXIT

	case ${action} in
		help|status|gen_stats|enabled|enable|disable|'') ;;
		gen_config|pause) lock_req=1 ;;
		boot|start|update|resume) cleanup_req=1 lock_req=1 ;;
		stop)
			reg_action "Stopping adblock-lean." || exit 1
			cleanup_req=1 kill_req=1 lock_req=1 ;;
		reload|restart)
			reg_action "Restarting adblock-lean." || exit 1
			cleanup_req=1 kill_req=1 lock_req=1 ;;
		*)
			reg_failure "Error: invalid action '${action}'."
			exit 1
	esac

	if [ -n "${kill_req}" ]
	then
		kill_abl_pids
		check_lock
		case ${?} in
			1) exit 1 ;;
			2)
				reg_failure "Error: failed to kill running adblock-lean processes."
				exit 1
		esac
	fi

	if [ -n "${lock_req}" ]
	then
		mk_lock "${action}" || { unset lock_req cleanup_req; exit ${?}; }
	fi

	case ${action} in
		help|gen_config|enable|disable|enabled|stop|'') ;;
		status) mkdir -p /var/run/adblock-lean ;;
		*)
			mkdir -p /var/run/adblock-lean
			load_config || exit 1
	esac

	:
}

### MAIN COMMAND FUNCTIONS

# 1 - (optional) '-noexit' to return to the calling function
gen_stats()
{
	reg_action "Generating dnsmasq stats." || exit 1
	kill -USR1 $(pgrep dnsmasq)
	print_msg "dnsmasq stats available for reading using 'logread'."
	[ "${1}" != '-noexit' ] && exit 0
}

gen_config()
{
	init_command gen_config || exit 1
	reg_action "Generating new default config for adblock-lean." || exit 1

	mkdir -p "${PREFIX}"

	cat > "${PREFIX}/config.tmp" <<-EOT
	# adblock-lean configuration options

	# One or more dnsmasq blocklist urls separated by spaces
	blocklist_urls="https://raw.githubusercontent.com/hagezi/dns-blocklists/main/dnsmasq/pro.txt https://raw.githubusercontent.com/hagezi/dns-blocklists/main/dnsmasq/tif.mini.txt"

	# One or more allowlist urls separated by spaces
	allowlist_urls=""

	# Path to optional local allowlist/blocklist files in the form:
	# site1.com
	# site2.com
	local_allowlist_path="${PREFIX}/allowlist"
	local_blocklist_path="${PREFIX}/blocklist"

	# Mininum number of lines of any individual downloaded blocklist part
	min_blocklist_file_part_line_count=1
	# Maximum size of any individual downloaded blocklist part
	max_blocklist_file_part_size_KB=20000
	# Maximum total size of combined, processed blocklist
	max_blocklist_file_size_KB=30000
	# Minimum number of good lines in final postprocessed blocklist
	min_good_line_count=100000

	# compress blocklist to save memory once blocklist has been loaded
	compress_blocklist=1 # enable (1) or disable (0) blocklist compression

	# restart dnsmasq if previous blocklist was extracted and before generation of
	# new blocklist thereby to free up memory during generaiton of new blocklist
	initial_dnsmasq_restart=0 # enable (1) or disable (0) initial dnsmasq restart

	# Maximum number of download retries
	max_download_retries=3

	# Download failed action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	download_failed_action="SKIP_PARTIAL"

	# Rogue element action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	# IGNORE - ignore any rogue elements (warning: use with caution)
	rogue_element_action="SKIP_PARTIAL"

	# dnsmasq --test failed action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	dnsmasq_test_failed_action="SKIP_PARTIAL"

	# The following shell variables are invoked using:
	# 'eval \${report_failure}' and 'eval \${report_success}'
	# thereby to facilitate sending e.g. mailsend/sms notifications
	# The variables '\${failure_msg}' and '\${success_msg}' can be employed
	report_failure="" 	 
	report_success=""	

	# Start delay in seconds when service is started from system boot
	boot_start_delay_s=120
	
	EOT
	
	if [ -f "${PREFIX}/config" ]
	then
		log_msg -warn "WARNING: config file ${PREFIX}/config already exists."
		log_msg "Saving new config file as: '${PREFIX}/config.new'."
		try_mv "${PREFIX}/config.tmp" "${PREFIX}/config.new" || exit 1
	else
		log_msg "Saving new config file as: '${PREFIX}/config'."
		try_mv "${PREFIX}/config.tmp" "${PREFIX}/config" || exit 1
	fi

	check_blocklist_compression_support
	exit ${?}
}

boot()
{
	init_command boot || exit 1
	reg_action "Sleeping for: ${boot_start_delay_s} seconds." || exit 1
	sleep "${boot_start_delay_s}"
	start "$@"
}

start() 
{
	init_command start || exit 1
	log_msg "Started adblock-lean."

	if type gawk &> /dev/null
	then
		log_msg "gawk detected so using gawk for fast (sub)domain match removal."
		awk_cmd="gawk"
	else
		log_msg "gawk not detected so using awk for the (sub)domain match removal."
		log_msg "Consider installing the gawk package 'opkg install gawk' for faster (sub)domain match removal."
		awk_cmd="awk"
	fi

	if sort --version 2>/dev/null | grep -qe coreutils
	then
		log_msg "coreutils-sort detected so sort will be fast."
	else
		log_msg "coreutils-sort not detected so sort will be a little slower."
		log_msg "Consider installing the coreutils-sort package (opkg install coreutils-sort) for faster sort."
	fi

	if [ "${compress_blocklist}" = 1 ]
	then
		check_blocklist_compression_support || exit 1
	fi

	if [ "${RANDOM_DELAY}" = "1" ]
	then
		random_delay_mins=$(($(hexdump -n 1 -e '"%u"' </dev/urandom)%60))
		reg_action "Delaying adblock-lean by: ${random_delay_mins} minutes (thundering herd prevention)." || exit 1
		sleep "${random_delay_mins}m"
	fi

	try_export_existing_blocklist
	[ ${?} = 1 ] && exit 1

	if [ "${initial_dnsmasq_restart}" = 1 ]
	then
		restart_dnsmasq || exit 1
	fi

	initial_uptime_ms=$(get_uptime_ms)

	if ! generate_preprocessed_blocklist_file_parts
	then
		reg_failure "Failed to generate preprocessed blocklist file with at least one line."
		restore_saved_blocklist
		exit 1
	fi

	log_msg "Successfully generated preprocessed blocklist file based on $(int2human ${preprocessed_blocklist_line_count}) lines."

	if ! generate_and_process_blocklist_file
	then
		reg_failure "New blocklist file check failed."
		restore_saved_blocklist
		exit 1
	fi

	log_msg "New blocklist file check passed."

	if ! import_blocklist_file
	then
		reg_failure "Failed to import new blocklist file."
		restore_saved_blocklist
		exit 1
	fi

	log_msg "Successfully imported new blocklist file for use by dnsmasq with size: ${imported_blocklist_file_size_human}."

	elapsed_time_str=$(get_elapsed_time_str)
	log_msg "Processing time for blocklist generation and import: ${elapsed_time_str}."

	restart_dnsmasq || exit 1

	if ! check_dnsmasq
	then
		reg_failure "The dnsmasq check failed with new blocklist file."

		if ! restore_saved_blocklist
		then
			reg_failure "Error: failed to restore saved blocklist."
			stop 1
		fi

		if ! restart_dnsmasq
		then
			log_msg "Stopping adblock-lean."
			stop 1
		fi

		if ! check_dnsmasq
		then
			reg_failure "The dnsmasq check failed with previous blocklist file."
			stop 1
		fi

		log_msg "Previous blocklist restored and dnsmasq check passed."
		exit 1
	fi

	log_msg "The dnsmasq check passed with new blocklist file."
	log_success "New blocklist installed with good line count: $(int2human ${good_line_count})."
	rm -f /var/run/adblock-lean/prev_blocklist.gz

	check_for_updates
	exit 0
}

# 1 - (optional) exit code
# 1/2 - (optional) '-noexit' to return to the calling function
stop()
{
	local stop_rc=0 noexit=
	for _arg in "$@"; do
		case "${_arg}" in
			"-noexit") noexit=1 ;;
			*[!0-9]*|'') ;;
			*) stop_rc="${_arg}"
		esac
	done
	msg="${msg% }"

	init_command stop || exit 1
	reg_action "Removing any adblock-lean blocklist files in /tmp/dnsmasq.d/ and restarting dnsmasq." || exit 1
	clean_dnsmasq_dir
	/etc/init.d/dnsmasq restart &> /dev/null
	log_msg "Stopped adblock-lean."
	[ -n "$noexit" ] && return "${stop_rc}"
	exit "${stop_rc}"
}

restart()
{
	init_command restart || exit 1
	stop -noexit || exit 1
	start
}

reload()
{
	restart
}

# return values:
# 0 - adblock-lean blocklist is loaded
# 1 - error
# 2 - adblock-lean is performing an action
# 3 - adblock-lean blocklist is not loaded
status()
{
	init_command status || exit 1
	check_lock
	case ${?} in
		1) exit 1 ;;
		2)
			report_pid_action
			exit 2
	esac

	check_active_blocklist_file ||
		{ log_msg "Blocklist in /tmp/dnsmasq.d/ not identified."; log_msg "adblock-lean is not active."; exit 3; }
	check_dnsmasq
	dnsmasq_status=${?}
	luci_dnsmasq_status=${dnsmasq_status}
	if [ ${dnsmasq_status} = 0 ]
	then
		if [ -f /tmp/dnsmasq.d/.blocklist.gz ]
		then
			good_line_count=$(gunzip -c /tmp/dnsmasq.d/.blocklist.gz | wc -l)
		elif [ -f /tmp/dnsmasq.d/blocklist ]
		then
			good_line_count=$(wc -l /tmp/dnsmasq.d/blocklist)
		fi
		luci_good_line_count=${good_line_count}
		log_msg "The dnsmasq check passed and the presently installed blocklist has good line count: $(int2human ${good_line_count})."
		log_msg "adblock-lean appears to be active."
		gen_stats -noexit
	else
		reg_failure "The dnsmasq check failed with existing blocklist file."
		log_msg "Consider a full reset by running: 'service adblock stop'."
	fi
	check_for_updates
	luci_update_status=${?}

	exit 0
}

pause()
{
	init_command pause || exit 1
	check_active_blocklist_file || { log_msg -err "Error: adblock-lean doesn't appear to be active."; exit 1; }
	reg_action "Pausing adblock-lean." || exit 1
	try_export_existing_blocklist || exit 1
	restart_dnsmasq || exit 1
	log_msg "adblock-lean is now paused."
	exit 0
}

resume()
{
	init_command resume || exit 1
	check_active_blocklist_file &&
		{ log_msg -err "Error: the blocklist file exists. adblock-lean doesn't appear to be paused."; exit 1; }

	reg_action "Resuming adblock-lean." || exit 1
	restore_saved_blocklist || 
		{ reg_failure "Error: failed to restore saved blocklist. Stopping adblock-lean."; stop 1; }
	restart_dnsmasq || exit 1
	log_msg "adblock-lean is now resumed."
	exit 0
}

update()
{
	init_command update || exit 1
	reg_action "Obtaining latest version of adblock-lean." || exit 1
	uclient-fetch https://raw.githubusercontent.com/lynxthecat/adblock-lean/master/adblock-lean -O /var/run/adblock-lean/adblock-lean.latest 1> /dev/null 2> /var/run/adblock-lean/uclient-fetch_err
	if grep -q "Download completed" /var/run/adblock-lean/uclient-fetch_err
	then
		try_mv /var/run/adblock-lean/adblock-lean.latest /etc/init.d/adblock-lean || exit 1
		chmod +x /etc/init.d/adblock-lean
		/etc/init.d/adblock-lean enable
		log_msg "adblock-lean has been updated to the latest version."
	else
		reg_failure "Unable to download latest version of adblock-lean."
	fi
	rm -f /var/run/adblock-lean/adblock-lean.latest /var/run/adblock-lean/uclient-fetch_err
	exit 0
}

:
